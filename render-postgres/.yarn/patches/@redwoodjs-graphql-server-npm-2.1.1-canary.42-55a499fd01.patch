diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000000000000000000000000000000000000..8303d828a504ee2afa272d572229206d758ce677
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,22 @@
+{
+  "workbench.colorCustomizations": {
+    "activityBar.activeBackground": "#fd35f9",
+    "activityBar.activeBorder": "#d9dd02",
+    "activityBar.background": "#fd35f9",
+    "activityBar.foreground": "#15202b",
+    "activityBar.inactiveForeground": "#15202b99",
+    "activityBarBadge.background": "#d9dd02",
+    "activityBarBadge.foreground": "#15202b",
+    "sash.hoverBorder": "#fd35f9",
+    "statusBar.background": "#fc03f7",
+    "statusBar.foreground": "#e7e7e7",
+    "statusBarItem.hoverBackground": "#fd35f9",
+    "statusBarItem.remoteBackground": "#fc03f7",
+    "statusBarItem.remoteForeground": "#e7e7e7",
+    "titleBar.activeBackground": "#fc03f7",
+    "titleBar.activeForeground": "#e7e7e7",
+    "titleBar.inactiveBackground": "#fc03f799",
+    "titleBar.inactiveForeground": "#e7e7e799"
+  },
+  "peacock.color": "#fc03f7"
+}
\ No newline at end of file
diff --git a/dist/functions/graphql.js b/dist/functions/graphql.js
index 835ad627228b7f770bb350aa4044f98c67d3e6eb..5b51639bd3f5d6d4978d79c7db418d79c1597be5 100644
--- a/dist/functions/graphql.js
+++ b/dist/functions/graphql.js
@@ -18,6 +18,8 @@ var _url = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/url"))
 
 var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/is-array"));
 
+var _fromEntries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/from-entries"));
+
 var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));
 
 var _map2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/map"));
@@ -82,6 +84,19 @@ const formatError = (err, message) => {
 
   return err;
 };
+
+exports.formatError = formatError;
+
+const convertToMultiValueHeaders = headers => {
+  const multiValueHeaders = {};
+
+  for (const [key, value] of headers) {
+    multiValueHeaders[key] = multiValueHeaders[key] || [];
+    multiValueHeaders[key].push(value);
+  }
+
+  return multiValueHeaders;
+};
 /**
  * Creates an Enveloped GraphQL Server, configured with default Redwood plugins
  *
@@ -95,8 +110,6 @@ const formatError = (err, message) => {
  */
 
 
-exports.formatError = formatError;
-
 const createGraphQLHandler = ({
   loggerConfig,
   context,
@@ -201,21 +214,23 @@ const createGraphQLHandler = ({
   function buildRequestObject(event) {
     var _event$requestContext;
 
-    const requestHeaders = new _crossUndiciFetch.Headers();
+    const requestHeaders = new _crossUndiciFetch.Headers(); // Avoid duplicating header values, because Yoga gets confused with CORS
 
-    for (const headerName in event.headers) {
-      const headerValue = event.headers[headerName];
+    if (event.multiValueHeaders) {
+      for (const headerName in event.multiValueHeaders) {
+        const headerValues = event.multiValueHeaders[headerName];
 
-      if (headerValue) {
-        requestHeaders.append(headerName, headerValue);
+        if (headerValues) {
+          for (const headerValue of headerValues) {
+            requestHeaders.append(headerName, headerValue);
+          }
+        }
       }
-    }
-
-    for (const headerName in event.multiValueHeaders) {
-      const headerValues = event.multiValueHeaders[headerName];
+    } else {
+      for (const headerName in event.headers) {
+        const headerValue = event.headers[headerName];
 
-      if (headerValues) {
-        for (const headerValue of headerValues) {
+        if (headerValue) {
           requestHeaders.append(headerName, headerValue);
         }
       }
@@ -266,25 +281,28 @@ const createGraphQLHandler = ({
   const handlerFn = async (event, lambdaContext) => {
     // In the future, this could be part of a specific handler for AWS lambdas
     lambdaContext.callbackWaitsForEmptyEventLoop = false;
-    let lambdaResponse;
+    let lambdaResponse; // const supportsMultiValueHeaders =
+    //   Object.keys(event.multiValueHeaders).length > 0
 
     try {
       const request = buildRequestObject(event);
+      console.log('MULTIVALUEHEADERS', event.multiValueHeaders);
+      console.log(`ðŸ—¯ \n ~ file: graphql.ts ~ line 281 ~ event`, event);
+      console.log(`ðŸ—¯ \n ~ file: graphql.ts ~ line 281 ~ request headers`, request.headers);
       const response = await yoga.handleRequest(request, {
         event,
         requestContext: lambdaContext
-      });
-      const multiValueHeaders = {};
-
-      for (const [key, value] of response.headers) {
-        multiValueHeaders[key] = multiValueHeaders[key] || [];
-        multiValueHeaders[key].push(value);
-      }
+      }); // @WARN - multivalue headers aren't supported on all deployment targets correctly
+      // Netlify âœ…, Vercel ðŸ›‘, AWS âœ…,...
+      // From https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format
+      // If you specify values for both headers and multiValueHeaders, API Gateway merges them into a single list.
+      // If the same key-value pair is specified in both, only the values from multiValueHeaders will appear in the merged list.
 
       lambdaResponse = {
         body: await response.text(),
         statusCode: response.status,
-        multiValueHeaders
+        headers: (0, _fromEntries.default)(response.headers),
+        multiValueHeaders: convertToMultiValueHeaders(response.headers)
       };
     } catch (e) {
       logger.error(e);
