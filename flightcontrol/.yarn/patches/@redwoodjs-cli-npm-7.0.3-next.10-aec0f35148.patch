diff --git a/dist/commands/deploy/flightcontrol.js b/dist/commands/deploy/flightcontrol.js
index 5e6c81118081393344de3f55623713e7c57459b9..ce3773dc26ab2784d586e19010ad732684cfc788 100644
--- a/dist/commands/deploy/flightcontrol.js
+++ b/dist/commands/deploy/flightcontrol.js
@@ -8,18 +8,17 @@ _Object$defineProperty(exports, "__esModule", {
 exports.handler = exports.description = exports.command = exports.builder = exports.alias = void 0;
 var _path = _interopRequireDefault(require("path"));
 var _execa = _interopRequireDefault(require("execa"));
+var _fsExtra = _interopRequireDefault(require("fs-extra"));
 var _terminalLink = _interopRequireDefault(require("terminal-link"));
-var _apiCLIConfigHandler = require("@redwoodjs/api-server/dist/apiCLIConfigHandler");
 var _cliHelpers = require("@redwoodjs/cli-helpers");
 var _projectConfig = require("@redwoodjs/project-config");
-var _lib = require("../../lib");
 const command = exports.command = 'flightcontrol <side>';
 const alias = exports.alias = 'fc';
 const description = exports.description = 'Build, Migrate, and Serve commands for Flightcontrol deploy';
 const builder = yargs => {
   yargs.positional('side', {
     choices: ['api', 'web'],
-    description: 'select side to build',
+    description: 'Side to deploy',
     type: 'string'
   }).option('prisma', {
     description: 'Apply database migrations',
@@ -30,7 +29,7 @@ const builder = yargs => {
     type: 'boolean',
     default: false
   }).option('data-migrate', {
-    description: 'Migrate the data in your database',
+    description: 'Apply data migrations',
     type: 'boolean',
     default: true,
     alias: 'dm'
@@ -50,39 +49,45 @@ const handler = async ({
     dataMigrate,
     serve
   });
-  const rwjsPaths = (0, _lib.getPaths)();
+  const rwjsPaths = (0, _projectConfig.getPaths)();
   const execaConfig = {
-    shell: true,
-    stdio: 'inherit',
     cwd: rwjsPaths.base,
-    extendEnv: true,
-    cleanup: true
+    shell: true,
+    stdio: 'inherit'
   };
   async function runApiCommands() {
-    if (serve) {
-      console.log('\nStarting api...');
-      await (0, _apiCLIConfigHandler.handler)({
-        port: (0, _projectConfig.getConfig)().api?.port || 8911,
-        apiRootPath: '/'
-      });
+    if (!serve) {
+      console.log('Building api...');
+      _execa.default.commandSync('yarn rw build api', execaConfig);
+      if (prisma) {
+        console.log('Running database migrations...');
+        _execa.default.commandSync(`node_modules/.bin/prisma migrate deploy --schema "${rwjsPaths.api.dbSchema}"`, execaConfig);
+      }
+      if (dataMigrate) {
+        console.log('Running data migrations...');
+        _execa.default.commandSync('yarn rw dataMigrate up', execaConfig);
+      }
+      return;
+    }
+    const serverFilePath = _path.default.join(rwjsPaths.api.dist, 'server.js');
+    const hasServerFile = _fsExtra.default.pathExistsSync(serverFilePath);
+    if (hasServerFile) {
+      (0, _execa.default)(`yarn node ${serverFilePath}`, execaConfig);
     } else {
-      console.log('\nBuilding api...');
-      _execa.default.sync('yarn rw build api', execaConfig);
-      prisma && _execa.default.sync(_path.default.join(rwjsPaths.base, 'node_modules/.bin/prisma'), ['migrate', 'deploy', '--schema', `"${rwjsPaths.api.dbSchema}"`], execaConfig);
-      dataMigrate && _execa.default.sync('yarn rw dataMigrate up', execaConfig);
+      const {
+        handler
+      } = await import('@redwoodjs/api-server/dist/apiCLIConfigHandler.js');
+      handler();
     }
   }
   async function runWebCommands() {
-    _execa.default.sync('yarn rw build web', execaConfig);
+    console.log('Building web...');
+    _execa.default.commandSync('yarn rw build web', execaConfig);
   }
   if (side === 'api') {
     runApiCommands();
   } else if (side === 'web') {
-    console.log('\nBuilding web...');
     runWebCommands();
-  } else {
-    console.log('Error with arguments provided');
-    // you broke something, which should be caught by Yargs
   }
 };
 exports.handler = handler;
\ No newline at end of file
